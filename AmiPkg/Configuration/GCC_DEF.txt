IDENTIFIER = Default TOOL_CHAIN_CONF
##############################################################
### Common Definitions Shared by All Tool Chains
##############################################################

#######################################################
## Built Tool Flags
#######################################################
*_*_*_ASL_FLAGS                    =
*_*_*_ASL_OUTFLAGS             = -p
*_*_*_VFR_FLAGS                     = -n
*_*_*_OPTROM_FLAGS                  = -e
*_*_*_GENFW_FLAGS                  =

#######################################################
## Built Tool Paths
#######################################################
*_*_*_ASL_PATH      		   = ENV(TOOLS_DIR)/iasl
*_*_*_DT_PATH      			   = ENV(TOOLS_DIR)/iasl5
*_*_*_VFR_PATH                      = VfrCompile
*_*_*_OPTROM_PATH                   = EfiRom
*_*_*_GENFW_PATH                   = GenFw

#######################################################
## GUID Tools (Tools producing GUID-ed FFS sections)
#######################################################

##################
# LzmaCompress tool definitions
##################
*_*_*_LZMA_PATH          = LzmaCompress
*_*_*_LZMA_GUID          = EE4E5898-3914-4259-9D6E-DC7BD79403CF

##################
# LzmaF86Compress tool definitions with converter for x86 code.
# It can improve the compression ratio if the input file is IA32 or X64 PE image.
# Notes: If X64 PE image is built based on GCC44, it may not get the better compression.
##################
*_*_*_LZMAF86_PATH       = LzmaF86Compress
*_*_*_LZMAF86_GUID       = D42AE6BD-1352-4bfb-909A-CA72A6EAE889

##################
# TianoCompress tool definitions
##################
*_*_*_TIANO_PATH         = TianoCompress
*_*_*_TIANO_GUID         = A31280AD-481E-41B6-95E8-127F4C984779

##################
# BPDG tool definitions
##################
*_*_*_VPDTOOL_PATH         = BPDG
*_*_*_VPDTOOL_GUID         = 8C3D856A-9BE6-468E-850A-24F7A8D38E08
##################

##################
# Unused tool definitions 
##################
*_*_*_OBJCOPY_PATH		 = echo
*_*_*_OBJCOPY_FLAGS		 = objcopy not needed for
*_*_*_SYMRENAME_PATH	 = echo
*_*_*_SYMRENAME_FLAGS	 = Symbol renaming not needed for

##############################################################
### Tool Chain Specific Definitions
##############################################################
####################################################################################
#
# GCC
#   GCC tool chain (GCC 4.4...4.8)
#
####################################################################################
*_GCC_*_*_FAMILY                = GCC

#######################################################
## Common Macros
#######################################################
DEFINE IA32_PREFIX       = /usr/bin/
#DEFINE IA32_PREFIX       = ENV(HOME)/programs/gcc/4.4/ia32/
DEFINE X64_PREFIX        = /usr/bin/
#DEFINE X64_PREFIX        = ENV(HOME)/programs/gcc/4.4/x64/
DEFINE AARCH64_PREFIX        = ENV(AARCH64_TOOLS_DIR)/

#######################################################
## Built Tool Flags
#######################################################

##########################################
# CC_FLAGS
##########################################
DEFINE CC_SUPPRESSED_WARNINGS = -Wno-comment -Wno-unkown-pragmas -Wno-unused-variables
DEFINE COMMON_CC_FLAGS = -nostdinc -g -fshort-wchar -fno-stack-protector -fno-strict-aliasing -Wall -Wno-missing-braces -Wno-array-bounds -ffunction-sections -fdata-sections -c -include AutoGen.h -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings ENV(EXTERNAL_CC_FLAGS)  -std=gnu89 DEF(CC_SUPPRESSED_WARNINGS)
*_GCC_IA32_CC_FLAGS            = DEF(COMMON_CC_FLAGS) -m32 -malign-double -D EFI32 -Os
*_GCC_X64_CC_FLAGS             = DEF(COMMON_CC_FLAGS) -m64 "-DEFIAPI=__attribute__((ms_abi))" -DNO_BUILTIN_VA_FUNCS -mno-red-zone -Wno-address -mcmodel=large
*_GCC_AARCH64_CC_FLAGS         =DEF(COMMON_CC_FLAGS)
##########################################
# ASM_FLAGS
##########################################
DEFINE COMMON_ASM_FLAGS = -c -x assembler -imacros $(DEST_DIR_DEBUG)/AutoGen.h
*_GCC_IA32_ASM_FLAGS           = DEF(COMMON_ASM_FLAGS) -m32 -Wa,--32 -march=i386
*_GCC_X64_ASM_FLAGS            = DEF(COMMON_ASM_FLAGS) -m64 -Wa,--64
*_GCC_AARCH64_ASM_FLAGS        = DEF(COMMON_ASM_FLAGS)
##########################################
# DLINK_FLAGS
##########################################
DEFINE COMMON_DLINK_FLAGS = -nostdlib -e $(IMAGE_ENTRY_POINT) -u $(IMAGE_ENTRY_POINT) -Map $(DEST_DIR_DEBUG)/$(BASE_NAME).map
DEFINE COMMON_IA_DLINK_FLAGS = DEF(COMMON_DLINK_FLAGS) -n -q --gc-sections --script=$(EDK_TOOLS_PATH)/Scripts/gcc4.4-ld-script
*_GCC_IA32_DLINK_FLAGS         = DEF(COMMON_IA_DLINK_FLAGS) -m elf_i386 --oformat=elf32-i386
*_GCC_X64_DLINK_FLAGS          = DEF(COMMON_IA_DLINK_FLAGS)  -melf_x86_64 --oformat=elf64-x86-64
*_GCC_AARCH64_DLINK_FLAGS      = DEF(COMMON_DLINK_FLAGS)

##########################################
# MAKE_FLAGS
##########################################
*_GCC_*_MAKE_FLAGS                   =

##########################################
# SLINK_FLAGS
##########################################
*_GCC_*_SLINK_FLAGS                  =

##########################################
# Preprocessor Flags
##########################################
DEFINE COMMON_PP_FLAGS_WITH_LINE_DIRECTIVE = -x c -E
DEFINE COMMON_PP_FLAGS_NO_LINE_DIRECTIVE = -x c -E -P
DEFINE COMMON_PP_FLAGS = DEF(COMMON_PP_FLAGS_WITH_LINE_DIRECTIVE)

*_GCC_*_VFRPP_FLAGS                  = DEF(COMMON_PP_FLAGS_NO_LINE_DIRECTIVE) -DVFRCOMPILE --include $(DEST_DIR_DEBUG)/$(MODULE_NAME)StrDefs.h ENV(EXTERNAL_CC_FLAGS)
*_GCC_*_APP_FLAGS                    = DEF(COMMON_PP_FLAGS)
# The assembler files are compiled using PP_FLAGS. 
# That's why we are using "-x assembler-with-cpp" here instead of "-x c".
*_GCC_*_PP_FLAGS                     = -E -x assembler-with-cpp -include $(DEST_DIR_DEBUG)/AutoGen.h

##########################################
# CBIN_FLAGS, ASLCC_FLAGS (C files that produce binaries)
##########################################
*_GCC_*_CBINCC_FLAGS           = -c -x c
*_GCC_IA32_ASLCC_FLAGS         = -x c -m32
*_GCC_X64_ASLCC_FLAGS          = -x c -m64
*_GCC_AARCH64_ASLCC_FLAGS      = -x c

*_GCC_*_CBINDLINK_FLAGS        = -nostdlib --dll -shared

# TODO: Make sure this matches EDKII Flags
DEFINE GCC_IA32_X64_ASLDLINK_FLAGS = -nostdlib --pie --gc-sections --entry ReferenceAcpiTable -u ReferenceAcpiTable
*_GCC_IA32_ASLDLINK_FLAGS          = DEF(GCC_IA32_X64_ASLDLINK_FLAGS) -m elf_i386
*_GCC_X64_ASLDLINK_FLAGS           = DEF(GCC_IA32_X64_ASLDLINK_FLAGS) -m elf_x86_64
*_GCC_AARCH64_ASLDLINK_FLAGS       = -nostdlib --pie --entry ReferenceAcpiTable

##########################################
# ASMLINK_FLAGS (ASM 16 linker)
##########################################
*_GCC_*_ASMLINK_FLAGS                = not support on this tool chain

##########################################
# RC and OBJCOPY flags
##########################################
*_GCC_IA32_RC_FLAGS             = -I binary -O elf32-i386        -B i386 --rename-section .data=.hii
*_GCC_IA32_OBJCOPY_FLAGS        = 
*_GCC_X64_RC_FLAGS             = -I binary -O elf64-x86-64      -B i386 --rename-section .data=.hii
*_GCC_X64_OBJCOPY_FLAGS        = 
*_GCC_AARCH64_RC_FLAGS             = -I binary -O elf64-littleaarch64      -B aarch64 --rename-section .data=.hii
*_GCC_AARCH64_OBJCOPY_FLAGS        = 

#######################################################
## Built Tool Paths
#######################################################

##########################################
# Common for all architectures
##########################################
# This is a workaround for EDKII build tool (build.exe) bug.
# Build process fails if we use *_GCC_*_MAKE_PATH here.
DEBUG_GCC_*_MAKE_PATH            = make
RELEASE_GCC_*_MAKE_PATH            = make
*_GCC_*_ASM16_PATH      = echo ASM16 is not supported on this tool chain..
# ASM 16 linker
*_GCC_*_ASMLINK_PATH                 = echo

##########################################
# IA32 Paths
##########################################
*_GCC_IA32_CC_PATH              = DEF(IA32_PREFIX)gcc
*_GCC_IA32_SLINK_PATH           = DEF(IA32_PREFIX)ar
*_GCC_IA32_DLINK_PATH           = DEF(IA32_PREFIX)ld
*_GCC_IA32_PP_PATH              = DEF(IA32_PREFIX)gcc
*_GCC_IA32_VFRPP_PATH           = DEF(IA32_PREFIX)gcc
*_GCC_IA32_APP_PATH             = DEF(IA32_PREFIX)gcc
*_GCC_IA32_ASM_PATH             = DEF(IA32_PREFIX)gcc
*_GCC_IA32_ASLCC_PATH           = DEF(IA32_PREFIX)gcc
*_GCC_IA32_ASLPP_PATH           = DEF(IA32_PREFIX)gcc
*_GCC_IA32_ASLDLINK_PATH        = DEF(IA32_PREFIX)ld
*_GCC_IA32_OBJCOPY_PATH         = DEF(IA32_PREFIX)objcopy
*_GCC_IA32_RC_PATH              = DEF(IA32_PREFIX)objcopy

##########################################
# X64 Paths
##########################################
*_GCC_X64_CC_PATH               = DEF(X64_PREFIX)gcc
*_GCC_X64_SLINK_PATH            = DEF(X64_PREFIX)ar
*_GCC_X64_DLINK_PATH            = DEF(X64_PREFIX)ld
*_GCC_X64_PP_PATH               = DEF(X64_PREFIX)gcc
*_GCC_X64_VFRPP_PATH            = DEF(X64_PREFIX)gcc
*_GCC_X64_APP_PATH              = DEF(X64_PREFIX)gcc
*_GCC_X64_ASM_PATH              = DEF(X64_PREFIX)gcc
*_GCC_X64_ASLCC_PATH            = DEF(X64_PREFIX)gcc
*_GCC_X64_ASLPP_PATH            = DEF(X64_PREFIX)gcc
*_GCC_X64_ASLDLINK_PATH         = DEF(X64_PREFIX)ld
*_GCC_X64_OBJCOPY_PATH         = DEF(X64_PREFIX)objcopy
*_GCC_X64_RC_PATH              = DEF(X64_PREFIX)objcopy

##########################################
# AARCH64 Paths
##########################################
*_GCC_AARCH64_CC_PATH               = DEF(AARCH64_PREFIX)aarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_SLINK_PATH            = DEF(AARCH64_PREFIX)aarch64-linux-gnu-ar
*_GCC_AARCH64_DLINK_PATH            = DEF(AARCH64_PREFIX)aarch64-linux-gnu-ld
*_GCC_AARCH64_PP_PATH               = DEF(AARCH64_PREFIX)aarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_VFRPP_PATH            = DEF(AARCH64_PREFIX)aarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_APP_PATH              = DEF(AARCH64_PREFIX)aarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_ASM_PATH              = DEF(AARCH64_PREFIX)aarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_ASLCC_PATH            = DEF(AARCH64_PREFIX)gaarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_ASLPP_PATH            = DEF(AARCH64_PREFIX)aarch64-linux-gnu-gcc-4.8.2
*_GCC_AARCH64_ASLDLINK_PATH         = DEF(AARCH64_PREFIX)aarch64-linux-gnu-ld
*_GCC_AARCH64_OBJCOPY_PATH         = DEF(AARCH64_PREFIX)aarch64-linux-gnu-objcopy
*_GCC_AARCH64_RC_PATH              = DEF(AARCH64_PREFIX)aarch64-linux-gnu-objcopy
