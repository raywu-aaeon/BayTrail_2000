//**********************************************************************
//**********************************************************************
//**                                                                  **
//**        (C)Copyright 1985-2013, American Megatrends, Inc.         **
//**                                                                  **
//**                       All Rights Reserved.                       **
//**                                                                  **
//**        5555 Oakbrook Pkwy, Suite 200, Norcross, GA 30093         **
//**                                                                  **
//**                       Phone: (770)-246-8600                      **
//**                                                                  **
//**********************************************************************
//**********************************************************************

//<AMI_FHDR_START>
//----------------------------------------------------------------------------
//
// Name:        SecureBootMod.sd
//
// Description:    
//
//----------------------------------------------------------------------------
//<AMI_FHDR_END>

#ifdef SETUP_DATA_DEFINITION
/***********************************************************/
/* Put NVRAM data definitions here.
/* For example:    UINT8 Data1;
/* These definitions will be converted by the build process
/* to a definitions of SETUP_DATA fields.
/***********************************************************/
#endif

#ifdef SECURITY_FORM_SET

  #ifdef FORM_SET_TYPEDEF
	#include "SecureBoot.h"
 #endif

  #ifdef FORM_SET_VARSTORE
    varstore SECURE_BOOT_SETUP_VAR,
        key   = AUTO_ID(SECURE_BOOT_SETUP_ID),
        name  = SecureBootSetup,
        guid  = SECURITY_FORM_SET_GUID;
    varstore SECURE_VAR_INSTALL_VAR,
        key   = AUTO_ID(SECURE_VAR_INSTALL_ID),
        name  = SecureVarPresent,
        guid  = SECURITY_FORM_SET_GUID;
    varstore SETUP_MODE_VAR,
        key   = AUTO_ID(SETUP_MODE_ID),
        name  = SetupMode,
        guid  = {0x8BE4DF61,0x93CA,0x11d2,0xAA,0xD,0x0,0xE0,0x98,0x03,0x2B,0x8C};
    varstore SECURE_BOOT_VAR,
        key   = AUTO_ID(SECURE_BOOT_ID),
        name  = SecureBoot,
        guid  = {0x8BE4DF61,0x93CA,0x11d2,0xAA,0xD,0x0,0xE0,0x98,0x03,0x2B,0x8C};
  #endif

  #ifdef FORM_SET_ITEM
  #endif

  #ifdef FORM_SET_GOTO

    SEPARATOR
    //
    // Define goto commands for the forms defined in this file
    //
    //
    // Define goto commands for the forms defined in this file
    //
    goto SECURE_BOOT_SUBMENU_FORM_ID,
    prompt  = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE),
    help    = STRING_TOKEN(SECURE_BOOT_MENU_FORM_HELP);

  #endif

  #ifdef FORM_SET_FORM
    //
    // Define forms
    //
    form formid = AUTO_ID(SECURE_BOOT_SUBMENU_FORM_ID),
    title     = STRING_TOKEN(SECURE_BOOT_MENU_FORM_TITLE);

        SEPARATOR
        suppressif  ideqval SETUP_MODE_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_PLATFORM_MODE),
                text   = STRING_TOKEN(STR_USER),
                flags  = 0,
                key    = 0;
        endif;
        suppressif  ideqval SETUP_MODE_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_PLATFORM_MODE),
                text   = STRING_TOKEN(STR_SETUP),
                flags  = 0,
                key    = 0;
        endif;
        suppressif  ideqval SECURE_BOOT_VAR.Value == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE),
                text   = STRING_TOKEN(STR_INACTIVE),
                flags  = 0,
                key    = 0;
        endif;
        suppressif  ideqval SECURE_BOOT_VAR.Value == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_PLATFORM_SECURE_MODE),
                text   = STRING_TOKEN(STR_ACTIVE),
                flags  = 0,
                key    = 0;
        endif;
        //
        // Define controls to be added to the main page of the formset
        //
        SEPARATOR
        grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootSupport,
                questionid = AUTO_ID(SECURE_BOOT_SUPPORT_CHANGE_KEY),
                prompt = STRING_TOKEN(STR_SECURE_BOOT_ENABLE),
                help = STRING_TOKEN(STR_SECURE_BOOT_HELP),
                default = DEFAULT_SECURE_BOOT_ENABLE,
                option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
                option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
            endoneof;
            oneof varid  = SECURE_BOOT_SETUP_VAR.SecureBootMode,
                prompt = STRING_TOKEN(STR_SECURE_BOOT_MODE),
                help = STRING_TOKEN(STR_SECURE_BOOT_MODE_HELP),
                default = DEFAULT_SECURE_BOOT_MODE,
                option text = STRING_TOKEN(SECURE_BOOT_STANDARD), value = 0, flags = MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(SECURE_BOOT_CUSTOM), value = 1, flags = RESET_REQUIRED;
            endoneof;
        endif;
        //
        // Define goto commands for the forms defined in this file
        //
         grayoutif ideqval SYSTEM_ACCESS.Access == SYSTEM_PASSWORD_USER OR ideqval SECURE_BOOT_SETUP_VAR.SecureBootMode == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE),
            help    = STRING_TOKEN(STR_KEY_MANAGEMENT_HELP);
     #if (defined(ENABLE_IMAGE_EXEC_POLICY_OVERRIDE) && ENABLE_IMAGE_EXEC_POLICY_OVERRIDE == 1)
            goto IMAGE_EXEC_POLICY_FORM_ID,
            prompt  = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE),
            help    = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_HELP);
     #endif   
        endif;
    endform;

    form formid = AUTO_ID(SECURE_KEY_MANAGEMENT_FORM_ID),
    title     = STRING_TOKEN(STR_KEY_MANAGEMENT_TITLE);

        oneof varid  = SECURE_BOOT_SETUP_VAR.DefaultKeyProvision,
            questionid = AUTO_ID(KEY_PROVISION_CHANGE_KEY),
            prompt = STRING_TOKEN(STR_DEFAULT_KEY_PROVISION_MODE),
            help = STRING_TOKEN(STR_KEY_PROVISION_MODE_HELP),
            default = DEFAULT_PROVISION_SECURE_VARS,
            option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN(STR_ENABLED), value = 1,  flags = MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        endoneof;
        //
        // Define goto commands for the forms defined in this file
        //
        SEPARATOR
        suppressif  ideqval SECURE_VAR_INSTALL_VAR.PK == 0 OR ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 1;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_FORCE_SETUP_MODE),
            help    = STRING_TOKEN(STR_FORCE_SETUP_MODE_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(FORCE_SETUP_KEY);
        endif;
        suppressif  ideqval SECURE_VAR_INSTALL_VAR.PK == 1 AND ideqval SECURE_BOOT_SETUP_VAR.DefaultKeyProvision == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_FORCE_DEFAULT_MODE),
            help    = STRING_TOKEN(STR_FORCE_DEFAULT_MODE_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(FORCE_DEFAULT_KEY);
        endif;
        grayoutif ideqval SECURE_VAR_INSTALL_VAR.PK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.KEK == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DB == 0 AND ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_GET_ALL_VARS),
            help    = STRING_TOKEN(STR_GET_PK_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(GET_PK_KEY);
        endif;
        SEPARATOR   
        suppressif  NOT ideqval SECURE_VAR_INSTALL_VAR.PK == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_PK),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        suppressif  NOT ideqval SECURE_VAR_INSTALL_VAR.PK == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_PK),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        grayoutif ideqval SECURE_VAR_INSTALL_VAR.PK == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_DELETE_PK),
            help    = STRING_TOKEN(STR_DELETE_PK_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(DELETE_PK_KEY);
        endif;
        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_SET_PK),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(SET_PK_KEY);

       SEPARATOR   
        
       suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.KEK == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_KEK),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.KEK == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_KEK),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        grayoutif ideqval SECURE_VAR_INSTALL_VAR.KEK == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_DELETE_KEK),
            help    = STRING_TOKEN(STR_DELETE_PK_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(DELETE_KEK_KEY);
        endif;

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_SET_KEK),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(SET_KEK_KEY);

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_APPEND_KEK_ENTRY),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(APPEND_KEK_KEY);
            
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.DB == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_DB),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.DB == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_DB),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        grayoutif ideqval SECURE_VAR_INSTALL_VAR.DB == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_DELETE_DB),
            help    = STRING_TOKEN(STR_DELETE_PK_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(DELETE_DB_KEY);
        endif;

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_SET_DB),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(SET_DB_KEY);

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_APPEND_DB_ENTRY),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(APPEND_DB_KEY);

       suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.DBT == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_DBT),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.DBT == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_DBT),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        grayoutif ideqval SECURE_VAR_INSTALL_VAR.DBT == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_DELETE_DBT),
            help    = STRING_TOKEN(STR_DELETE_PK_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(DELETE_DBT_KEY);
        endif;

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_SET_DBT),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(SET_DBT_KEY);

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_APPEND_DBT_ENTRY),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(APPEND_DBT_KEY);

       suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_DBX),
                text   = STRING_TOKEN(STR_NOT_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;
        suppressif NOT ideqval SECURE_VAR_INSTALL_VAR.DBX == 1;
            text 
                help   = STRING_TOKEN(STR_EMPTY),
                text   = STRING_TOKEN(STR_MANAGE_DBX),
                text   = STRING_TOKEN(STR_INSTALLED),
                flags  = 0,
                key    = 0;
        endif;

        grayoutif ideqval SECURE_VAR_INSTALL_VAR.DBX == 0;
            goto SECURE_KEY_MANAGEMENT_FORM_ID,
            prompt  = STRING_TOKEN(STR_DELETE_DBX),
            help    = STRING_TOKEN(STR_DELETE_PK_HELP),
            flags   = INTERACTIVE, key = AUTO_ID(DELETE_DBX_KEY);
        endif;

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_SET_DBX),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(SET_DBX_KEY);

        goto SECURE_KEY_MANAGEMENT_FORM_ID,
        prompt  = STRING_TOKEN(STR_APPEND_DBX_ENTRY),
        help    = STRING_TOKEN(STR_APPEND_KEK_ENTRY_HELP),
        flags   = INTERACTIVE, key = AUTO_ID(APPEND_DBX_KEY);

    endform;

#if (defined(ENABLE_IMAGE_EXEC_POLICY_OVERRIDE) && ENABLE_IMAGE_EXEC_POLICY_OVERRIDE == 1)
    form formid = AUTO_ID(IMAGE_EXEC_POLICY_FORM_ID),
    title     = STRING_TOKEN(IMAGE_EXEC_POLICY_FORM_TITLE);

        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_FV,
            prompt = STRING_TOKEN(STR_LOAD_FROM_FV),
            help = STRING_TOKEN(STR_LOAD_FROM_HELP),
            option text = STRING_TOKEN(ALWAYS_ENABLED), value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_OROM,
            prompt = STRING_TOKEN(STR_LOAD_FROM_OROM),
            help = STRING_TOKEN(STR_LOAD_FROM_HELP),
            default = LOAD_FROM_OROM,
#if (LOAD_FROM_OROM == 0 )
            option text = STRING_TOKEN(ALWAYS_ENABLED), value = 0,  flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_OROM < 2 )
            option text = STRING_TOKEN(ALWAYS_DISABLED), value = 1, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_OROM < 3 )
            option text = STRING_TOKEN(ALLOW_EXECUTE_ON_SECURITY_VIOLATION), value = 2, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_OROM < 4 )
            option text = STRING_TOKEN(DEFER_EXECUTE_ON_SECURITY_VIOLATION), value = 3, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_OROM < 5 )
            option text = STRING_TOKEN(DENY_EXECUTE_ON_SECURITY_VIOLATION), value = 4, flags = MANUFACTURING | RESET_REQUIRED;
#endif
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION), value = 5, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_REMOVABLE_MEDIA,
            prompt = STRING_TOKEN(STR_LOAD_FROM_REMOVABLE_MEDIA),
            help = STRING_TOKEN(STR_LOAD_FROM_HELP),
            default = LOAD_FROM_REMOVABLE_MEDIA,
#if (LOAD_FROM_REMOVABLE_MEDIA == 0 )
            option text = STRING_TOKEN(ALWAYS_ENABLED), value = 0,  flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_REMOVABLE_MEDIA < 2 )
            option text = STRING_TOKEN(ALWAYS_DISABLED), value = 1, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_REMOVABLE_MEDIA < 3 )
            option text = STRING_TOKEN(ALLOW_EXECUTE_ON_SECURITY_VIOLATION), value = 2, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_REMOVABLE_MEDIA < 4 )
            option text = STRING_TOKEN(DEFER_EXECUTE_ON_SECURITY_VIOLATION), value = 3, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_REMOVABLE_MEDIA < 5 )
            option text = STRING_TOKEN(DENY_EXECUTE_ON_SECURITY_VIOLATION), value = 4, flags = MANUFACTURING | RESET_REQUIRED;
#endif
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION), value = 5, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = SECURE_BOOT_SETUP_VAR.Load_from_FIXED_MEDIA,
            prompt = STRING_TOKEN(STR_LOAD_FROM_FIXED_MEDIA),
            help = STRING_TOKEN(STR_LOAD_FROM_HELP),
            default = LOAD_FROM_FIXED_MEDIA,
#if (LOAD_FROM_FIXED_MEDIA == 0 )
            option text = STRING_TOKEN(ALWAYS_ENABLED), value = 0,  flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_FIXED_MEDIA < 2 )
            option text = STRING_TOKEN(ALWAYS_DISABLED), value = 1, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_FIXED_MEDIA < 3 )
            option text = STRING_TOKEN(ALLOW_EXECUTE_ON_SECURITY_VIOLATION), value = 2, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_FIXED_MEDIA < 4 )
            option text = STRING_TOKEN(DEFER_EXECUTE_ON_SECURITY_VIOLATION), value = 3, flags = RESET_REQUIRED;
#endif
#if (LOAD_FROM_FIXED_MEDIA < 5 )
            option text = STRING_TOKEN(DENY_EXECUTE_ON_SECURITY_VIOLATION), value = 4, flags = MANUFACTURING | RESET_REQUIRED;
#endif
            option text = STRING_TOKEN(QUERY_USER_ON_SECURITY_VIOLATION), value = 5, flags = RESET_REQUIRED;
        endoneof;

    endform;
#endif
  #endif

#endif // SECURITY_FORM_SET

//**********************************************************************
//**********************************************************************
//**                                                                  **
//**        (C)Copyright 1985-2013, American Megatrends, Inc.         **
//**                                                                  **
//**                       All Rights Reserved.                       **
//**                                                                  **
//**        5555 Oakbrook Pkwy, Suite 200, Norcross, GA 30093         **
//**                                                                  **
//**                       Phone: (770)-246-8600                      **
//**                                                                  **
//**********************************************************************
//**********************************************************************
